// Top-level build file where you can add configuration options common to all sub-projects/modules.
// Gradle加载顺序: 1.settings.gradle    2.project的gradle    3.依次每个module的gradle
apply from : "config.gradle"

// 定义了 Android 编译工具的类路径, repositories中的jCenter是一个著名的 Maven 仓库(bintray.com维护)
buildscript {
    // 仓库
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        google()
    }
    // 依赖, 一般依赖的库名都是 组名:库名:版本号, 其中版本号可以使用通配符保证获取最新如2.2.1 -> 2.2.+ / 2.2+ / +
    // 由于项目创建的时间较早. 暂时的gradle插件请保持在 ≤ 2.3.3
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        // realm插件
        classpath 'io.realm:realm-gradle-plugin:5.7.0'
        // retrolambda
//        classpath 'me.tatarka:gradle-retrolambda:3.4.0'
        //GreenDao
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'
    }
}

// 其中定义的属性会被应用到所有moudle中, 一般我们的project就一个
allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.google.com' }
        google()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 添加一个task, 编译后即 Gradle视图下的root/Tasks/other/hello
task hello {
    println 'Hello Hello'
}

// 表示该task在执行阶段才会执行任务, 上面的编译过程直接执行
task helloworld << {
    println 'Hello World'
}

// 闭包的委托对象，
task delegateObject{
    assert delegate == rootProject.delegateObject
}
